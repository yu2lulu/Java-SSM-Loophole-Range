(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{193:function(t,e,r){"use strict";r.r(e);var n=r(6),s=Object(n.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h2",{attrs:{id:"一、漏洞环境信息"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#一、漏洞环境信息"}},[t._v("#")]),t._v(" 一、漏洞环境信息")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("http://127.0.0.1:8080/ssrf/okhttp?url=http://www.baidu.com/img/baidu.svg\n")])])]),r("h4",{attrs:{id:"payload-http-127-0-0-1-8080-ssrf-okhttp-url-http-www-taobao-com"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#payload-http-127-0-0-1-8080-ssrf-okhttp-url-http-www-taobao-com"}},[t._v("#")]),t._v(" "),r("strong",[t._v("payload")]),t._v(" "),r("code",[t._v("http://127.0.0.1:8080/ssrf/okhttp?url=http://www.taobao.com")])]),t._v(" "),r("p",[r("img",{attrs:{src:"/img/okhttp_payload.jpg",alt:""}})]),t._v(" "),r("h2",{attrs:{id:"二、修复说明"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#二、修复说明"}},[t._v("#")]),t._v(" 二、修复说明")]),t._v(" "),r("p",[r("img",{attrs:{src:"/img/okhttp_fenxi.jpg",alt:""}})]),t._v(" "),r("h4",{attrs:{id:"service层-public-string-geturl-string-url-添加修复代码分析"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#service层-public-string-geturl-string-url-添加修复代码分析"}},[t._v("#")]),t._v(" "),r("strong",[t._v("service层 public String getUrl(String url) 添加修复代码分析")])]),t._v(" "),r("p",[r("strong",[t._v("SSRF核心代码")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('\n@Service\npublic class okHttpServiceImpl implements okHttpService {\n\n    private final OkHttpClient client = new OkHttpClient();\n\n    @Override\n    public String getUrl(String url) throws IOException {\n        //输入过滤\n        Boolean urlIsValid = urlCheck.isValid(url);\n\n        if (!urlIsValid){\n            return "非法URL";\n        }\n\n        //发起http请求获取数据\n        Request request = new Request.Builder().url(url).build();\n\n        Response response = client.newCall(request).execute();\n        if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);\n\n        return response.body().string();\n    }\n}\n')])])]),r("p",[r("strong",[t._v("SSRF-URL校验函数")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('/*\n* url 检测\n* */\npublic class urlCheck {\n    public static Boolean isValid(String url){\n        //URL白名单列表\n        ArrayList<String> whiteHost = new ArrayList<>();\n        whiteHost.add("www.baidu.com");\n        whiteHost.add("www.qq.com");\n\n        //白名单端口号\n        int whitePort = 80;\n        URL checkUrl = null;\n        try {\n            checkUrl = new URL(url);\n            String host = checkUrl.getHost();  //域名\n            int port = checkUrl.getPort(); //端口\n\n            if (whiteHost.indexOf(host.toLowerCase()) == -1){\n                return false;\n            }\n\n            if (port==-1){  //表示没有端口号，需要通过http和https进行判断\n                if (url.toLowerCase().startsWith("https")){\n                    return false;\n                }\n            }else if (whitePort != port ){\n                return false;\n            }else{\n                return true;\n            }\n\n        } catch (MalformedURLException e) {\n            e.printStackTrace();\n            return false;\n        }\n        return true;\n    }\n}\n')])])]),r("h2",{attrs:{id:"三、小结"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#三、小结"}},[t._v("#")]),t._v(" 三、小结")]),t._v(" "),r("ul",[r("li",[t._v("成因：输入未校验")]),t._v(" "),r("li",[t._v("位置：Service层")]),t._v(" "),r("li",[t._v("修复：参数输入过滤\n"),r("ul",[r("li",[t._v("1.限制域名白名单")]),t._v(" "),r("li",[t._v("2.限制端口白名单")]),t._v(" "),r("li",[t._v(".....")])])])])])}),[],!1,null,null,null);e.default=s.exports}}]);